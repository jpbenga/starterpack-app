import * as functions from "firebase-functions";
import * as admin from "firebase-admin";
import OpenAI from "openai";
import { Request, Response } from "express";
import * as logger from "firebase-functions/logger";

admin.initializeApp();

const openaiApiKey = functions.config().openai?.key;

if (!openaiApiKey) {
  logger.error("OpenAI API key is not set in environment variables.");
}

const openai = new OpenAI({
  apiKey: openaiApiKey,
});

export const generateImage = functions.https.onRequest(
  async (request: Request, response: Response) => {
    try {
      const userId = request.body.userId;
      const imageBase64 = request.body.image;
      const prompt = request.body.prompt;

      if (!userId || !imageBase64 || !prompt) {
        response.status(400).send({ error: "Missing parameters (userId, image, or prompt)" });
        return;
      }

      const base64Data = imageBase64.includes(',') ? imageBase64.split(',')[1] : imageBase64;
      const originalImageBuffer = Buffer.from(base64Data, "base64");
      const originalImagePath = `images/original/${userId}/${Date.now()}.jpg`;
      const bucket = admin.storage().bucket();
      const originalImageFile = bucket.file(originalImagePath);

      await originalImageFile.save(originalImageBuffer, {
        contentType: "image/jpeg",
      });

      const [originalImageUrl] = await originalImageFile.getSignedUrl({
        action: "read",
        expires: "03-09-2491",
      });

      const openAIResponse = await openai.images.generate({
        model: "dall-e-2",
        prompt: prompt,
        n: 1,
        size: "256x256",
        response_format: "b64_json",
      });

      const generatedImageBase64 = openAIResponse.data[0]?.b64_json;

      if (!generatedImageBase64) {
        logger.error("No image generated by OpenAI", { openAIResponse });
        throw new Error("No image generated by OpenAI. It might be due to content policy violation.");
      }

      const generatedImageBuffer = Buffer.from(generatedImageBase64, "base64");
      const generatedImagePath = `images/generated/${userId}/${Date.now()}.jpg`;
      const generatedImageFile = bucket.file(generatedImagePath);

      await generatedImageFile.save(generatedImageBuffer, {
        contentType: "image/jpeg",
      });

      const [generatedImageUrl] = await generatedImageFile.getSignedUrl({
        action: "read",
        expires: "03-09-2491",
      });

      await admin.firestore().collection("images").add({
        userId: userId,
        originalImageUrl: originalImageUrl,
        generatedImageUrl: generatedImageUrl,
        prompt: prompt,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      response.status(200).send({ generatedImageUrl: generatedImageUrl });

    } catch (error: any) {
      logger.error("Error in generateImage function", {
         errorMessage: error.message,
         errorStack: error.stack,
         ...(error.response?.data && { openAIError: error.response.data }),
      });
      const message = error.message || "An unexpected error occurred.";
      response.status(500).send({ error: message });
    }
  }
);